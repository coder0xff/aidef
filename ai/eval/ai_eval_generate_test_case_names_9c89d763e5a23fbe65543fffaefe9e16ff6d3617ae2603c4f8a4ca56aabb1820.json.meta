{"sig": "generate_test_case_names(signature: str, preconditions: List[str], postconditions: List[str], test_cases: List[str]) -> List[str]", "pre": ["\"signature\" is signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"test_cases\" is a list of test case descriptions"], "post": ["the return value is a JSON list of test case names suitable for use as Python function names, each containing the name of the function under test"], "inputs": ["signature is \"fibonacci(n: int) -> int\"", "preconditions is \"['\"n\" is a non-negative integer']\"", "postconditions is \"['the return value is the nth fibonacci number']\"", "test_cases is \"[{'description': 'Test for the base case of 0, the first Fibonacci number', 'inputs': {'n': 0}, 'expected_output': 0}, {'description': 'Test for the base case of 1, the second Fibonacci number', 'inputs': {'n': 1}, 'expected_output': 1}, {'description': 'Test for n=2, verifying the third Fibonacci number is correct', 'inputs': {'n': 2}, 'expected_output': 1}, {'description': 'Test n at a typical small value of 5, checking the sequence progresses correctly', 'inputs': {'n': 5}, 'expected_output': 5}, {'description': 'Test n at a larger value to verify algorithm efficiency and correctness', 'inputs': {'n': 20}, 'expected_output': 6765}, {'description': 'Test for the edge case of the largest integer value that is reasonable for the execution environment to handle without performance degradation', 'inputs': {'n': 40}, 'expected_output': 102334155}]\""]}