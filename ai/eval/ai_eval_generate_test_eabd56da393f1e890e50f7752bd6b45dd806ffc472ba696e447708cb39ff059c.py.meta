{"sig": "generate_test(signature: str, preconditions: List[str], postconditions: List[str], test_name: str, test_description: str) -> str", "pre": ["\"signature\" is signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test"], "post": ["the return value is a Python function that calls the function under test within a try block using the described inputs", "the return value is a Python function that does not put any code in a try block other than the call to the function under test", "the return value is a Python function that prints 1) the expected output of the function under test, 2) the actual output of the function under test, and 3) \"PASS\" or \"FAIL\" to stdout to communicate the results"], "inputs": ["signature is \"lorum_ipsum(words: int) -> str\"", "preconditions is \"['\"words\" is a non-negative integer']\"", "postconditions is \"['the return value is a lorem ipsum with a word-count of \"words\"']\"", "test_name is \"test_lorum_ipsum_with_larger_number_of_words\"", "test_description is \"{'description': 'Test with a larger number of words to confirm scalability and correct word count in the output.', 'inputs': {'words': 50}, 'expected': '[A lorem ipsum string of exactly 50 words]'}\""]}