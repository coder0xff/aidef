{"sig": "accuse_test_failure(signature: str, preconditions: List[str], postconditions: List[str], function_implementation: str, test_name: str, test_description: str, test_implementation: str, test_failure: str)", "pre": ["\"signature\" is the signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"function_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test", "\"test_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_failure\" is the output of the test function when it failed", "the \"preconditions\" and \"postconditions\" superscede the \"test_description\", and only the preconditions may be assumed, and only the postconditions must be satisfied and satisfied completely", "a \"test_description\" that does not assume the \"preconditions\" is erroneous", "a \"test_description\" that exceeds the \"postconditions\" is erroneous"], "post": ["the return value is a string that elaborates on why the test failed, examines the \"test_implementation\" for bugs or incorrect assumptions beyond those specified, and examines the \"function_implementation\" for bugs or incorrect assumptions beyond those specified.", "if the \"test_description\" is erroneous, it is assumed that the \"function_implementation\" is correct and the \"test_implementation\" is incorrect", "the return value is a Python function that prints 1) the expected output of the function under test, 2) the actual output of the function under test, and 3) \"PASS\" or \"FAIL\" to stdout to communicate the results"], "inputs": ["signature is \"lorum_ipsum(words: int) -> str\"", "preconditions is \"['\"words\" is a non-negative integer']\"", "postconditions is \"['the return value is a lorem ipsum with a word-count of \"words\"', 'The function has a docstring']\"", "function_implementation is \"def lorum_ipsum(words: int) -> str:\n    \"\"\"\n    Generates a lorem ipsum text of a specified word count.\n\n    Parameters:\n    words (int): The number of words to generate in the lorem ipsum text.\n\n    Returns:\n    str: A string containing the lorem ipsum text with the specified word count.\n    \"\"\"\n    lorem_text = (\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore \"\n                  \"et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut \"\n                  \"aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum \"\n                  \"dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui \"\n                  \"officia deserunt mollit anim id est laborum.\").split()\n    output_text = ' '.join(lorem_text[i % len(lorem_text)] for i in range(words))\n    return output_text\n\"", "test_name is \"test_lorum_ipsum_with_one_word\"", "test_description is \"{'description': 'Test with one word expecting a lorem ipsum string of exactly one word, validating the handling of the smallest positive integer.', 'inputs': {'words': 1}, 'expected': 'lorem'}\"", "test_implementation is \"def test_lorum_ipsum_with_one_word():\n    try:\n        actual_output = lorum_ipsum(words=1)\n    except Exception as e:\n        print(f\"Test failed with unexpected exception: {e}\")\n        return\n\n    expected_output = 'lorem'\n    print(f\"Expected output: {expected_output}\")\n    print(f\"Actual output: {actual_output}\")\n    if actual_output == expected_output:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\"", "test_failure is \"Expected output: lorem\nActual output: Lorem\nFAIL\n\""]}