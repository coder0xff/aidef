{"sig": "accuse_test_failure(signature: str, preconditions: List[str], postconditions: List[str], function_implementation: str, test_name: str, test_description: str, test_implementation: str, test_failure: str)", "pre": ["\"signature\" is the signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"function_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test", "\"test_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_failure\" is the output of the test function when it failed", "the \"preconditions\" and \"postconditions\" superscede the \"test_description\", and only the preconditions may be assumed, and only the postconditions must be satisfied and satisfied completely", "a \"test_description\" that does not assume the \"preconditions\" is erroneous", "a \"test_description\" that exceeds the \"postconditions\" is erroneous"], "post": ["the return value is a string that elaborates on why the test failed, examines the \"test_implementation\" for bugs or incorrect assumptions beyond those specified, and examines the \"function_implementation\" for bugs or incorrect assumptions beyond those specified.", "if the \"test_description\" is erroneous, it is assumed that the \"function_implementation\" is correct and the \"test_implementation\" is incorrect", "the return value ends with either the text \"CULPRIT: test_implementation\" or \"CULPRIT: function_implementation\""], "inputs": ["signature is \"lorum_ipsum(words: int) -> str\"", "preconditions is \"['\"words\" is a non-negative integer']\"", "postconditions is \"['the return value is a lorem ipsum with a word-count of \"words\"', 'The function has a docstring']\"", "function_implementation is \"def lorum_ipsum(words: int) -> str:\n    \"\"\"\n    Returns a string of lorem ipsum text with a length determined by the 'words' parameter.\n    \n    Parameters:\n    words (int): The number of words to generate in the lorem ipsum text.\n    \n    Returns:\n    str: A string of lorem ipsum text containing the specified number of words.\n    \"\"\"\n    lorem_ipsum_text = (\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut \"\n        \"labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi \"\n        \"ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum \"\n        \"dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui \"\n        \"officia deserunt mollit anim id est laborum.\"\n    )\n    word_list = lorem_ipsum_text.split()\n    if words <= len(word_list):\n        return ' '.join(word_list[:words])\n    else:\n        repeats = words // len(word_list)\n        remainder = words % len(word_list)\n        return (' '.join(word_list) + ' ') * repeats + ' '.join(word_list[:remainder])\n\n\"", "test_name is \"test_lorum_ipsum_with_small_number_of_words\"", "test_description is \"{'description': 'Test with a small number of words (e.g., 5) to verify the function returns a lorem ipsum string with a word count exactly matching the input.', 'inputs': {'words': 5}, 'expected': 'lorem ipsum dolor sit amet'}\"", "test_implementation is \"def test_lorum_ipsum_with_small_number_of_words():\n    # Test with a small number of words (e.g., 5) to verify the function returns a lorem ipsum string with a word count exactly matching the input.\n    expected_output = \"lorem ipsum dolor sit amet\"\n    try:\n        actual_output = lorum_ipsum(words=5)\n    except Exception as e:\n        print(f\"Exception occurred: {e}\")\n        return\n    \n    print(\"Expected:\", expected_output)\n    print(\"Actual:\", actual_output)\n    if actual_output == expected_output:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\"", "test_failure is \"Expected: lorem ipsum dolor sit amet\nActual: Lorem ipsum dolor sit amet,\nFAIL\n\""]}