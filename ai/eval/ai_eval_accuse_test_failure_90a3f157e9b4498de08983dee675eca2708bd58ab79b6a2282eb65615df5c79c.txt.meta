{"sig": "accuse_test_failure(signature: str, preconditions: List[str], postconditions: List[str], function_implementation: str, test_name: str, test_description: str, test_implementation: str, test_failure: str)", "pre": ["\"signature\" is the signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"function_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test", "\"test_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_failure\" is the output of the test function when it failed", "the \"preconditions\" and \"postconditions\" superscede the \"test_description\", and only the preconditions may be assumed, and only the postconditions must be satisfied and satisfied completely", "a \"test_description\" that does not assume the \"preconditions\" is erroneous", "a \"test_description\" that exceeds the \"postconditions\" is erroneous"], "post": ["the return value is a string that elaborates on why the test failed, examines the \"test_implementation\" for bugs or incorrect assumptions beyond those specified, and examines the \"function_implementation\" for bugs or incorrect assumptions beyond those specified.", "if the \"test_description\" is erroneous, it is assumed that the \"function_implementation\" is correct and the \"test_implementation\" is incorrect", "the return value ends with either the text \"CULPRIT: test_implementation\" or \"CULPRIT: function_implementation\""], "inputs": ["signature is \"gamma_function(x: float) -> float\"", "preconditions is \"['The input x must be a float.', 'The input x should not be a non-positive integer.']\"", "postconditions is \"['The function returns a float.', 'The returned float is the gamma function evaluated at x.', 'The function has a docstring']\"", "function_implementation is \"def gamma_function(x: float) -> float:\n    \"\"\"\n    Calculate the gamma function for a given float x.\n    \n    The gamma function is an extension of the factorial function, with its argument shifted down by 1, to real and complex numbers.\n    This function computes the gamma function for a given float x.\n    \n    :param x: A float number for which the gamma function is to be evaluated.\n    :return: The gamma function evaluated at x.\n    \"\"\"\n    import math\n    return math.gamma(x)\"", "test_name is \"test_gamma_function_with_large_positive_float\"", "test_description is \"{'description': 'Test with a positive float very large in magnitude to see if the function can handle large inputs correctly.', 'inputs': {'x': 100.0}}\"", "test_implementation is \"def test_gamma_function_with_large_positive_float():\n    try:\n        # Call the function under test with the specified input\n        actual_output = gamma_function(100.0)\n    except Exception as e:\n        print(f\"Test failed due to an exception: {e}\")\n        return\n\n    # Expected output (not calculated here, just a placeholder for demonstration)\n    expected_output = \"Expected output for gamma_function(100.0)\"\n\n    # Print the expected output\n    print(f\"Expected Output: {expected_output}\")\n\n    # Print the actual output\n    print(f\"Actual Output: {actual_output}\")\n\n    # Determine and print PASS or FAIL\n    if actual_output == expected_output:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\"", "test_failure is \"Expected Output: Expected output for gamma_function(100.0)\nActual Output: 9.332621544394415e+155\nFAIL\n\""]}