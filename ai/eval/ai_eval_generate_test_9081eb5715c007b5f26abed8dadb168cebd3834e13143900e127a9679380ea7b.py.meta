{"sig": "generate_test(signature: str, preconditions: List[str], postconditions: List[str], test_name: str, test_description: str) -> str", "pre": ["\"signature\" is signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test"], "post": ["the return value is a Python function that calls the function under test within a try block using the described inputs", "the return value is a Python function that does not put any code in a try block other than the call to the function under test", "the return value is a Python function that prints 1) the expected output of the function under test, 2) the actual output of the function under test, and 3) \"PASS\" or \"FAIL\" to stdout to communicate the results"], "inputs": ["signature is \"gamma_function(x: float) -> float\"", "preconditions is \"['The input x must be a float.', 'The input x should not be a non-positive integer.']\"", "postconditions is \"['The function returns a float.', 'The returned float is the gamma function evaluated at x.']\"", "test_name is \"test_gamma_function_with_negative_float_close_to_non_positive_integer\"", "test_description is \"{'description': 'Test with a negative float, very close to a non-positive integer, but not an integer, to ensure it handles edge cases near non-allowed values correctly.', 'inputs': {'x': -1.0001}}\""]}