{"sig": "accuse_test_failure(signature: str, preconditions: List[str], postconditions: List[str], function_implementation: str, test_name: str, test_description: str, test_implementation: str, test_failure: str)", "pre": ["\"signature\" is the signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"function_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test", "\"test_implementation\" is the Python function that exercises the function under test with the described inputs and verifies the described outputs", "\"test_failure\" is the output of the test function when it failed", "the \"preconditions\" and \"postconditions\" superscede the \"test_description\", and only the preconditions may be assumed, and only the postconditions must be satisfied and satisfied completely", "a \"test_description\" that does not assume the \"preconditions\" is erroneous", "a \"test_description\" that exceeds the \"postconditions\" is erroneous"], "post": ["the return value is a string that elaborates on why the test failed, examines the \"test_implementation\" for bugs or incorrect assumptions beyond those specified, and examines the \"function_implementation\" for bugs or incorrect assumptions beyond those specified.", "if the \"test_description\" is erroneous, it is assumed that the \"function_implementation\" is correct and the \"test_implementation\" is incorrect", "the return value ends with either the text \"CULPRIT: test_implementation\" or \"CULPRIT: function_implementation\""], "inputs": ["signature is \"lorum_ipsum(words: int) -> str\"", "preconditions is \"['\"words\" is a non-negative integer']\"", "postconditions is \"['the return value is a lorem ipsum with a word-count of \"words\"', 'The function has a docstring']\"", "function_implementation is \"def lorum_ipsum(words: int) -> str:\n    \"\"\"\n    Generates a lorem ipsum text of a given word count.\n\n    Parameters:\n    words (int): The number of words the lorem ipsum text should contain.\n\n    Returns:\n    str: A string containing the lorem ipsum text with the specified word count.\n    \"\"\"\n    ipsum_text = (\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \"\n                  \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \"\n                  \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \"\n                  \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \"\n                  \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, \"\n                  \"eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. \"\n                  \"Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui \"\n                  \"ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, \"\n                  \"sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.\").split()\n\n    # Ensure the generated ipsum text matches the exact word count requested.\n    generated = ' '.join(ipsum_text[:words])\n    return generated\n\"", "test_name is \"test_lorum_ipsum_with_one_word\"", "test_description is \"{'description': 'Test with one word expecting a lorem ipsum string of exactly one word, validating the handling of the smallest positive integer.', 'inputs': {'words': 1}, 'expected': 'lorem'}\"", "test_implementation is \"def test_lorum_ipsum_with_one_word():\n    try:\n        actual_output = lorum_ipsum(words=1)\n    except Exception as e:\n        print(f\"Test failed with unexpected exception: {e}\")\n        return\n\n    expected_output = 'lorem'\n    print(f\"Expected output: {expected_output}\")\n    print(f\"Actual output: {actual_output}\")\n    if actual_output == expected_output:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\"", "test_failure is \"Expected output: lorem\nActual output: Lorem\nFAIL\n\""]}