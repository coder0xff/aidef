{"sig": "generate_test(signature: str, preconditions: List, postconditions: List, test_name: str, test_description: str) -> str", "pre": ["\"signature\" is signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test"], "post": ["the return value is a Python function that exercises the function under test with the described inputs and verifies the described outputs", "the Python function first prints \"TEST CASE BEGINS\"", "the Python function prints its name and the test case description to stdout", "the Python function calls the function under test within a try block and print the exception to stdout if the function under test raises an exception", "the Python function does not put any code in a try block other than the call of the function under test", "the Python function prints PASS or FAIL to stdout to communicate the results", "the Python function prints the cause of the failure to stdout if the test fails, including the actual result of the function under test", "the Python function finally prints \"TEST CASE ENDS\""], "inputs": ["signature is fibonacci(n: int) -> int", "preconditions is ['\"n\" is a non-negative integer']", "postconditions is ['the return value is the nth fibonacci number', 'The function has a docstring']", "test_name is test_fibonacci_edge_case_with_the_largest_integer_expected_to_be_correctly_handled_by_the_function", "test_description is {'description': 'Edge case with the largest integer expected to be correctly handled by the function', 'input': 20, 'expected_output': 6765}"]}