{"sig": "generate_test_case_names(signature: str, preconditions: List, postconditions: List, test_cases: List) -> List", "pre": ["\"signature\" is signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"test_cases\" is a list of test case descriptions"], "post": ["the return value is a json list of test case names suitable for use as Python function names", "the test case names each include the name of the function under test"], "inputs": ["signature is fibonacci(n: int) -> int", "preconditions is ['\"n\" is a non-negative integer']", "postconditions is ['the return value is the nth fibonacci number', 'The function has a docstring']", "test_cases is [{'description': 'Test with 0 as input to check first Fibonacci number', 'input': 0, 'expected_output': 0}, {'description': 'Test with 1 as input to check second Fibonacci number', 'input': 1, 'expected_output': 1}, {'description': 'Test with small positive integer to check if function returns correct intermediate Fibonacci number', 'input': 5, 'expected_output': 5}, {'description': \"Test with larger positive integer to verify function's ability to compute higher order Fibonacci numbers\", 'input': 10, 'expected_output': 55}, {'description': 'Edge case with the largest integer expected to be correctly handled by the function', 'input': 20, 'expected_output': 6765}]"]}