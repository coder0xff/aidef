{"sig": "generate_test(signature: str, preconditions: List, postconditions: List, test_name: str, test_description: str) -> str", "pre": ["\"signature\" is signature of the function under test", "\"preconditions\" is a list of preconditions of the function under test", "\"postconditions\" is a list of postconditions of the function under test", "\"test_name\" is the name of the Python test to implement for the function under test", "\"test_description\" is the test case description of the Python test to implement for the function under test"], "post": ["the return value is a Python function that exercises the function under test with the described inputs and verifies the described outputs", "the Python function first prints \"TEST CASE BEGINS\"", "the Python function prints its name and the test case description to stdout", "the Python function calls the function under test within a try block and print the exception to stdout if the function under test raises an exception", "the Python function does not put any code in a try block other than the call of the function under test", "the Python function prints PASS or FAIL to stdout to communicate the results", "the Python function prints the cause of the failure to stdout if the test fails, including the actual result of the function under test", "the Python function finally prints \"TEST CASE ENDS\""], "inputs": ["signature is lorum_ipsum(words: int) -> str", "preconditions is ['\"words\" is a non-negative integer']", "postconditions is ['the return value is a lorem ipsum with a word-count of \"words\"', 'The function has a docstring']", "test_name is test_lorum_ipsum_with_one_word", "test_description is {'description': 'Test with a single word', 'input': {'words': 1}, 'expected_result': {'return_value': 'lorem', 'word_count': 1, 'docstring_present': True}}"]}